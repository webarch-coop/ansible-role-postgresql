---
- name: PostgreSQL user present
  block:

    - name: Getent passwd
      getent:
        database: passwd

    - name: Set a variable for the HOME directory of the postgres user
      set_fact:
        postgresql_home: "{{ user.value[4] }}"
      when: user.key == "postgres"
      loop: "{{ getent_passwd | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Debug the postgres HOME directory
      debug:
        var: postgresql_home
        verbosity: 1

    - name: Set the postgresql_password variable to be an empty string
      set_fact:
        postgresql_password: ""

    - name: "Check if {{ postgresql_home }}/.pgpass exists"
      stat:
        path: "{{ postgresql_home }}/.pgpass"
      register: postgresql_home_pgpass_stat

    - name: Read the PostgreSQL password from the .pgpass file
      block:

        - name: "Slurp {{ postgresql_home }}/.pgpass"
          slurp:
            src: "{{ postgresql_home }}/.pgpass"
          register: postgresql_pgpass_b64encoded

        - name: "Set a fact for the {{ postgresql_home }}/.pgpass contents and the string we want to match"
          set_fact:
            postgresql_pgpass_lines: "{{ postgresql_pgpass_b64encoded['content'] | b64decode }}"
            postgresql_pgpass_line: "{{ postgresql_host }}:{{ postgresql_port }}:{{ postgresql_db }}:{{ postgresql_user }}"
          no_log: true

        - name: "Read the {{ postgresql_user }} password from the file"
          set_fact:
            postgresql_password: "{{ line.split(':')[5] }}" 
          when: postgresql_pgpass_line in line
          loop: "{{ postgresql_pgpass_lines }}"
          loop_control:
            loop_var: line

        - name: Debug password
          debug:
            var: postgresql_password
            verbosity: 2

        # TODO Check that the password works and if it doesn't delete the line
        # and set postgresql_password back to an empty string

      when:
        - ( postgresql_home_pgpass_stat is defined )
        - ( postgresql_home_pgpass_stat.stat.exists )
    
    - name: Generate a PostgreSQL password and write it to .pgpass
      block:

        - name: PostgreSQL password generated
          command: pwgen -n 20 1
          register: postgresql_pwgen
          check_mode: false
          no_log: true

        - name: Set a fact for the PostgreSQL password
          set_fact:
            postgresql_password: "{{ postgresql_pwgen.stdout | trim }}"
          no_log: true
 
        - name: "Password written to {{ postgresql_home }}/.pgpass"
          lineinfile:
            path: "{{ postgresql_home }}/.pgpass"
            line: "{{ postgresql_pgpass_line }}:{{ postgresql_password }}"
            create: true
            owner: postgres
            group: postgres
            mode: 0600
          no_log: true

      when:
        - ( postgresql_home_pgpass_stat is defined )
        - ( not postgresql_home_pgpass_stat.stat.exists )
        - ( postgresql_password is not defined ) or ( postgresql_password is defined and postgresql_password | length <= 0 )

    - name: PostgreSQL user present
      postgresql_user:
        name: "{{ postgresql_user }}"
        password: "{{ postgresql_password }}"
        db: "{{ postgresql_db }}"
        priv: ALL
        state: present
      become: true
      become_user: postgres

  when:
    - ( postgresql_db is defined )
    - ( postgresql_db | length > 0 )
    - ( postgresql_user is defined )
    - ( postgresql_user | length > 0 )
  tags:
    - postgresql
...
