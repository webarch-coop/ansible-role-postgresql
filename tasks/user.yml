# Copyright 2020-2025 Chris Croome
#
# This file is part of the Webarchitects PostgreSQL Ansible role.
#
# The Webarchitects PostgreSQL Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PostgreSQL Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PostgreSQL Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PostgreSQL user present
  block:

    # https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS
    - name: Ensure that the postgresql_db and postgresql_user variables values are sensible
      ansible.builtin.assert:
        that:
          - postgresql_db is regex("^[a-z][a-z0-9_]{1,25}$")
          - postgresql_user is regex("^[a-z][a-z0-9_]{1,25}$")
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Include the PostgreSQL info tasks
      ansible.builtin.include_tasks: info.yml
      when: postgresql_info is not defined

    - name: Include tasks to set the postgresql_postgres_home variable
      ansible.builtin.include_tasks: home.yml
      when: >-
        ( postgresql_postgres_home is not defined ) or
        ( postgresql_postgres_home | length == 0 )

    - name: Set the postgresql_password variable to be an empty string
      ansible.builtin.set_fact:
        postgresql_password: ""

    - name: Check if .pgpass exists
      ansible.builtin.stat:
        path: "{{ postgresql_postgres_home }}/.pgpass"
      register: postgresql_postgres_home_pgpass_stat

    - name: Read the PostgreSQL password from the .pgpass file
      ansible.builtin.include_tasks: pgpass_read.yml
      when:
        - postgresql_postgres_home_pgpass_stat is defined | bool
        - postgresql_postgres_home_pgpass_stat.stat.exists | bool

    - name: Generate a PostgreSQL password and write it to .pgpass
      ansible.builtin.include_tasks: pgpass_write.yml
      when: >-
        ( postgresql_postgres_home_pgpass_stat is defined and not postgresql_postgres_home_pgpass_stat.stat.exists | bool ) or
        ( postgresql_password is not defined ) or ( postgresql_password is defined and postgresql_password | length == 0 )

    - name: PostgreSQL user present
      community.postgresql.postgresql_user:
        name: "{{ postgresql_user }}"
        password: "{{ postgresql_password }}"
        db: "{{ postgresql_db }}"
        state: present
        login_db: "{{ postgresql_maintenance_db }}"
        login_user: "{{ postgresql_superuser }}"
        port: "{{ postgresql_port }}"
      no_log: "{% if ansible_verbosity < 2 %}true{% else %}false{% endif %}"
      become: true
      become_user: "{{ postgresql_superuser }}"

    - name: PostgreSQL info
      community.postgresql.postgresql_info:
        login_db: "{{ postgresql_maintenance_db }}"
        login_user: "{{ postgresql_superuser }}"
        port: "{{ postgresql_port }}"
        filter:
          - databases
          - roles
      register: postgresql_info
      become: true
      become_user: "{{ postgresql_superuser }}"

    - name: Debug PostgreSQL info
      ansible.builtin.debug:
        var: postgresql_info
        verbosity: 3

    - name: PostgreSQL privs present
      community.postgresql.postgresql_privs:
        type: database
        db: "{{ postgresql_db }}"
        role: "{{ postgresql_user }}"
        privs: "{{ postgresql_user_privs | default('ALL') }}"
        state: present
        login_db: "{{ postgresql_maintenance_db }}"
        login_user: "{{ postgresql_superuser }}"
        port: "{{ postgresql_port }}"
      no_log: "{% if ansible_verbosity < 2 %}true{% else %}false{% endif %}"
      become: true
      become_user: "{{ postgresql_superuser }}"
      vars:
        postgresql_db_check: "{{ ansible_facts.ansible_local['postgresql_info.databases.' ~ postgresql_db] }}"
        postgresql_user_check: "{{ ansible_facts.ansible_local['postgresql_info.roles.' ~ postgresql_user] }}"
      when:
        - postgresql_db_check is defined
        - postgresql_user_check is defined

    - name: PostgreSQL database owner
      community.postgresql.postgresql_owner:
        obj_name: "{{ postgresql_db }}"
        obj_type: database
        new_owner: "{{ postgresql_db_owner }}"
        port: "{{ postgresql_port }}"
        login_user: "{{ postgresql_superuser }}"
        login_db: "{{ postgresql_maintenance_db }}"
      become: true
      become_user: "{{ postgresql_superuser }}"
      when: postgresql_db_owner is defined

  when:
    - postgresql_db is defined
    - postgresql_db | length > 0
    - postgresql_user is defined
    - postgresql_user | length > 0
  tags:
    - postgresql
...
