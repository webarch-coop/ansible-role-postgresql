---
- name: PostgreSQL user present
  block:

    - name: Getent passwd
      getent:
        database: passwd

    - name: Set a variable for the HOME directory of the postgres user
      set_fact:
        postgresql_postgres_home: "{{ user.value[4] }}"
      when: user.key == "postgres"
      loop: "{{ getent_passwd | dict2items }}"
      loop_control:
        loop_var: user
        label: "{{ user.key }}"

    - name: Debug the postgres HOME directory
      debug:
        var: postgresql_postgres_home
        verbosity: 1

    - name: Set the postgresql_password variable to be an empty string and set postgresql_pgpass_line
      set_fact:
        postgresql_password: ""
        postgresql_pgpass_line: "{{ postgresql_host }}:{{ postgresql_port }}:{{ postgresql_db }}:{{ postgresql_user }}"

    - name: "Check if {{ postgresql_postgres_home }}/.pgpass exists"
      stat:
        path: "{{ postgresql_postgres_home }}/.pgpass"
      register: postgresql_postgres_home_pgpass_stat

    - name: Read the PostgreSQL password from the .pgpass file
      include_tasks: pgpass_read.yml
      when: ( postgresql_postgres_home_pgpass_stat is defined ) and ( postgresql_postgres_home_pgpass_stat.stat.exists )

    - name: Generate a PostgreSQL password and write it to .pgpass
      include_tasks: pgpass_write.yml
      when:
        - ( postgresql_postgres_home_pgpass_stat is defined ) and ( not postgresql_postgres_home_pgpass_stat.stat.exists )
        - ( postgresql_password is not defined ) or ( postgresql_password is defined and postgresql_password | length <= 0 )

    - name: PostgreSQL user present
      postgresql_user:
        name: "{{ postgresql_user }}"
        password: "{{ postgresql_password }}"
        db: "{{ postgresql_db }}"
        priv: ALL
        state: present
      become: true
      become_user: postgres

  when:
    - ( postgresql_db is defined )
    - ( postgresql_db | length > 0 )
    - ( postgresql_user is defined )
    - ( postgresql_user | length > 0 )
  tags:
    - postgresql
...
