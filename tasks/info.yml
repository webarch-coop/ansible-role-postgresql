# Copyright 2020-2025 Chris Croome
#
# This file is part of the Webarchitects PostgreSQL Ansible role.
#
# The Webarchitects PostgreSQL Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PostgreSQL Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PostgreSQL Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: PostgreSQL info
  block:

    - name: Stat /usr/bin/pg_lsclusters
      ansible.builtin.stat:
        path: /usr/bin/pg_lsclusters
      register: postgresql_ps_lsclusters_check

    - name: Gather PostgreSQL info when pg_lsclusters is present
      block:

        # - name: Run pg_lsclusters -j
        #   ansible.builtin.command: pg_lsclusters -j
        #   changed_when: false
        #   check_mode: false
        #   register: postgresql_ps_lsclusters

        # - name: Set a fact for the results of pg_lsclusters -j
        #   ansible.builtin.set_fact:
        #     postgresql_lsclusters: "{{ postgresql_ps_lsclusters.stdout }}"

        # - name: Debug postgresql_ps_lsclusters
        #   ansible.builtin.debug:
        #     var: postgresql_lsclusters
        #     verbosity: 3

        - name: PostgreSQL info
          block:

            - name: Gather PostgreSQL info
              community.postgresql.postgresql_info:
                login_db: "{{ postgresql_maintenance_db }}"
                login_user: "{{ postgresql_superuser }}"
                port: "{{ postgresql_port }}"
                filter:
                  - databases
                  - roles
                  - version
              register: postgresql_info
              become: true
              become_method: community.general.sudosu
              become_user: "{{ postgresql_superuser }}"

            - name: Debug postgresql_info
              ansible.builtin.debug:
                var: postgresql_info
                verbosity: 3

            - name: Set a fact for the existing PostgreSQL databases
              ansible.builtin.set_fact:
                postgresql_dbs_existing: "{{ postgresql_info.databases.keys() }}"
              when: postgresql_info is defined

            - name: Debug existing PostgreSQL databases
              ansible.builtin.debug:
                var: postgresql_dbs_existing
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
              when: postgresql_dbs_existing is defined

            - name: PostgreSQL existing database info
              ansible.builtin.debug:
                msg: "{{ postgresql_info | community.general.json_query(postgresql_db_query) }}"
                verbosity: 2
              vars:
                postgresql_db_query: "databases.{{ postgresql_db }}"
              when:
                - postgresql_info is defined
                - postgresql_db in postgresql_info.databases.keys()

            - name: Set a fact for the existing PostgreSQL users
              ansible.builtin.set_fact:
                postgresql_users_existing: "{{ postgresql_info.roles.keys() }}"
              when: postgresql_info is defined

            - name: Debug existing PostgreSQL users
              ansible.builtin.debug:
                var: postgresql_users_existing
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
              when: postgresql_users_existing is defined

            - name: PostgreSQL existing role info
              ansible.builtin.debug:
                msg: "{{ postgresql_info | community.general.json_query(postgresql_role_query) }}"
                verbosity: 2
              vars:
                postgresql_role_query: "roles.{{ postgresql_user }}"
              when:
                - postgresql_info is defined
                - postgresql_db in postgresql_info.roles.keys()

          rescue:

            - name: Debug PostgreSQL info
              ansible.builtin.debug:
                var: postgresql_info

      when: postgresql_ps_lsclusters_check.stat.exists | bool

  tags:
    - postgresql
    - postgresql_info
...
