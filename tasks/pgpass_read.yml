---
- name: Read the PostgreSQL password from the .pgpass file
  block:

    - name: Include tasks to set the postgresql_postgres_home variable
      ansible.builtin.include_tasks: home.yml
      when: >-
        ( postgresql_postgres_home is not defined ) or
        ( postgresql_postgres_home | length == 0 )

    - name: Slurp .pgpass
      ansible.builtin.slurp:
        src: "{{ postgresql_postgres_home }}/.pgpass"
      register: postgresql_pgpass_b64encoded
      no_log: "{% if ansible_verbosity < 2 %}true{% else %}false{% endif %}"

    - name: Set a fact for the records in .pgpass using the jc pgpass filter
      ansible.builtin.set_fact:
        postgresql_pgpass: "{{ postgresql_pgpass_b64encoded['content'] | ansible.builtin.b64decode | trim | community.general.jc('pgpass') }}"
      no_log: "{% if ansible_verbosity < 2 %}true{% else %}false{% endif %}"

    - name: Debug postgresql_pgpass
      ansible.builtin.debug:
        var: postgresql_pgpass
        verbosity: 3

    - name: Set a fact for the PostgreSQL user password
      ansible.builtin.set_fact:
        postgresql_password: "{{ postgresql_pgpass | community.general.json_query(postgresql_password_jmespath_query) }}"
      vars:
        postgresql_password_jmespath_query: "[?hostname == '{{ postgresql_host }}'] | [?port == '{{ postgresql_port }}'] | [?database == '{{ postgresql_db }}'] | [?username == '{{ postgresql_user }}'].password | [0]"

    - name: Test the PostgreSQL user password
      community.postgresql.postgresql_user_obj_stat_info:
        db: "{{ postgresql_db }}"
        login_host: "{{ postgresql_host }}"
        login_password: "{{ postgresql_password }}"
        login_user: "{{ postgresql_user }}"
        port: "{{ postgresql_port }}"
        filter: invocation

    # TODO If the password check above fails delete the line and set
    # postgresql_password back to an empty string

  tags:
    - postgresql
...
