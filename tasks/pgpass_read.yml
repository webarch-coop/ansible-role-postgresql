# Copyright 2020-2024 Chris Croome
#
# This file is part of the Webarchitects PostgreSQL Ansible role.
#
# The Webarchitects PostgreSQL Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PostgreSQL Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PostgreSQL Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Read the PostgreSQL password from the .pgpass file
  block:

    - name: The username, database name, host and port number are required
      ansible.builtin.assert:
        that:
          - postgresql_db is defined
          - postgresql_db | length > 0
          - postgresql_user is defined
          - postgresql_user | length > 0
          - postgresql_host is defined
          - postgresql_port is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Include the PostgreSQL info tasks
      ansible.builtin.include_tasks: info.yml
      when: postgresql_info is not defined

    - name: Include tasks to set the postgresql_postgres_home variable
      ansible.builtin.include_tasks: home.yml
      when: >-
        ( postgresql_postgres_home is not defined ) or
        ( postgresql_postgres_home | length == 0 )

    - name: Slurp .pgpass
      ansible.builtin.slurp:
        src: "{{ postgresql_postgres_home }}/.pgpass"
      register: postgresql_pgpass_b64encoded
      no_log: "{% if ansible_verbosity < 2 %}true{% else %}false{% endif %}"

    - name: Set a fact for the records in .pgpass using the jc pgpass filter
      ansible.builtin.set_fact:
        postgresql_pgpass: "{{ postgresql_pgpass_b64encoded['content'] | ansible.builtin.b64decode | trim | community.general.jc('pgpass') }}"
      no_log: "{% if ansible_verbosity < 2 %}true{% else %}false{% endif %}"

    - name: Debug postgresql_pgpass
      ansible.builtin.debug:
        var: postgresql_pgpass
        verbosity: 3

    - name: Set a fact for the PostgreSQL user password
      ansible.builtin.set_fact:
        postgresql_password: "{{ postgresql_pgpass | community.general.json_query(postgresql_password_jmespath_query) }}"
      vars:
        postgresql_password_jmespath_query: "[?hostname == '{{ postgresql_host }}'] | [?port == '{{ postgresql_port }}'] | [?database == '{{ postgresql_db }}'] | [?username == '{{ postgresql_user }}'].password | [0]"

    - name: Test the password when the password, user and database are present
      block:

        - name: Test the PostgreSQL user password
          community.postgresql.postgresql_user_obj_stat_info:
            db: "{{ postgresql_db }}"
            login_host: "{{ postgresql_host }}"
            login_password: "{{ postgresql_password }}"
            login_user: "{{ postgresql_user }}"
            port: "{{ postgresql_port }}"
          register: postgresql_user_obj_stat_info

        # TODO If the password check above fails delete the line and set
        # postgresql_password back to an empty string

        - name: Debug PostgreSQL user password test
          ansible.builtin.debug:
            var: postgresql_user_obj_stat_info
            verbosity: 3

      when:
        - postgresql_password is defined
        - postgresql_password | length > 0
        - postgresql_dbs_existing is defined
        - postgresql_dbs_existing != []
        - postgresql_users_existing is defined
        - postgresql_users_existing != []
        - postgresql_db in postgresql_dbs_existing
        - postgresql_user in postgresql_users_existing
        - postgresql_info | community.general.json_query(postgresql_user_canlogin_query) | bool

  tags:
    - postgresql
...
