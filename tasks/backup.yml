# Copyright 2020-2025 Chris Croome
#
# This file is part of the Webarchitects PostgreSQL Ansible role.
#
# The Webarchitects PostgreSQL Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects PostgreSQL Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects PostgreSQL Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Tasks to create a cronjob to dump all PostgreSQL databases
  block:

    - name: Include tasks to get the HOME directory for the PostgreSQL user
      ansible.builtin.include_tasks: home.yml
      when: >-
        (postgresql_postgres_home is not defined) or
        (postgresql_postgres_home | length == 0)

    - name: Backup directory present
      ansible.builtin.file:
        path: "{{ postgresql_backups }}"
        state: directory
        owner: "{{ postgresql_superuser }}"
        group: "{{ postgresql_superuser }}"
        mode: "0700"
      when:
        - postgresql_backups is defined
        - postgresql_backups | length > 0

    - name: Backup PostgreSQL cron job
      block:

        - name: Debug PostgreSQL info databases
          ansible.builtin.debug:
            var: postgresql_info.databases.keys()
            verbosity: 2

        - name: Stat the random minute file
          ansible.builtin.stat:
            path: "{{ postgresql_postgres_home }}/.cron_min"
          register: postgresql_cron_min_file

        - name: Crontab random minute file present
          ansible.builtin.lineinfile:
            path: "{{ postgresql_postgres_home }}/.cron_min"
            line: "{{ postgresql_cron_min_list | ansible.builtin.random }}"
            regex: "{{ postgresql_cron_min_regex }}"
            create: true
            state: present
            mode: "0600"
            owner: "{{ postgresql_superuser }}"
            group: "{{ postgresql_superuser }}"
          register: postgresql_cron_min_edited
          when: not postgresql_cron_min_file.stat.exists | bool

        - name: Stat the random minute file
          ansible.builtin.stat:
            path: "{{ postgresql_postgres_home }}/.cron_min"
          register: postgresql_cron_min_file

        - name: Read the minute from the ~/.cron_min file
          ansible.builtin.slurp:
            src: "{{ postgresql_postgres_home }}/.cron_min"
          register: postgresql_cron_min_b64encoded
          when: postgresql_cron_min_file.stat.exists | bool

        - name: Set a variable for the users crontab minute
          ansible.builtin.set_fact:
            postgresql_cron_min: "{{ postgresql_cron_min_b64encoded['content'] | ansible.builtin.b64decode | trim }}"
          when: postgresql_cron_min_b64encoded is defined

        # TODO This should create one cronjob per database not one for all of them

        - name: Backup crontab present
          block:

            - name: Debug crontab
              ansible.builtin.debug:
                msg:
                  - "user: {{ postgresql_superuser }}"
                  - "name: Dump PostgreSQL databases"
                  - "job: {% for d in postgresql_info.databases.keys() | sort %}pg_dump {{ d }} > {{ postgresql_backups | default('/var/backups/postgres') }}/{{ d }}.sql{% if not loop.last %} ; {% endif %}{% endfor %}"
                  - "hour: {{ postgresql_cron_hour }}"
                  - "minute: {{ postgresql_cron_min }}"
                verbosity: 2

            - name: Crontab present
              ansible.builtin.cron:
                user: "{{ postgresql_superuser }}"
                name: "Dump PostgreSQL databases"
                job: "{% for d in postgresql_info.databases.keys() %}pg_dump {{ d }} > {{ postgresql_backups | default('/var/backups/postgres') }}/{{ d }}.sql{% if not loop.last %} ; {% endif %}{% endfor %}"
                hour: "{{ postgresql_cron_hour }}"
                minute: "{{ postgresql_cron_min }}"
              tags:
                - molecule-idempotence-notest

          when:
            - postgresql_cron_min is defined
            - postgresql_info is defined

      when:
        - postgresql_backups is defined
        - postgresql_backups | length > 0
        - postgresql_cron_hour is defined

  tags:
    - postgresql
...
